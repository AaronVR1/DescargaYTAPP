import React from 'react';
export interface InterfaceAlertDialogProps {
    isOpen?: boolean;
    onClose?: () => any;
    defaultIsOpen?: boolean;
    leastDestructiveRef?: React.RefObject<any>;
    initialFocusRef?: React.RefObject<any> | any;
    finalFocusRef?: React.RefObject<any> | any;
    avoidKeyboard?: boolean;
    closeOnOverlayClick?: boolean;
    isKeyboardDismissable?: boolean;
    animationPreset?: 'slide' | 'fade';
    useRNModal?: boolean;
    children?: React.ReactNode;
}
export interface IAlertDialogContentProps {
    focusScope?: boolean;
}
export type IAlertDialogComponentType<StyledAlertDialog, StyledAlertDialogContent, StyledAlertDialogCloseButton, StyledAlertDialogHeader, StyledAlertDialogFooter, StyledAlertDialogBody, StyledAlertDialogBackdrop> = React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialog> & React.PropsWithoutRef<StyledAlertDialog & IAlertDialogProps>> & {
    Content: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogContent> & React.PropsWithoutRef<IAlertDialogContentProps & StyledAlertDialogContent>>;
    CloseButton: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogCloseButton> & React.PropsWithoutRef<StyledAlertDialogCloseButton>>;
    Header: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogHeader> & React.PropsWithoutRef<StyledAlertDialogHeader>>;
    Footer: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogFooter> & React.PropsWithoutRef<StyledAlertDialogFooter>>;
    Body: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogBody> & React.PropsWithoutRef<StyledAlertDialogBody>>;
    Backdrop: React.ForwardRefExoticComponent<React.RefAttributes<StyledAlertDialogBackdrop> & React.PropsWithoutRef<StyledAlertDialogBackdrop>>;
};
export type IAlertDialogProps = InterfaceAlertDialogProps;
//# sourceMappingURL=types.d.ts.map