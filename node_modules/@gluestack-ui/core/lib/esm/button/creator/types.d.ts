import type { PropsWithoutRef, RefAttributes } from 'react';
import type { PressableProps } from 'react-native';
export interface InterfaceButtonProps extends PressableProps {
    isHovered?: boolean;
    isPressed?: boolean;
    isFocused?: boolean;
    isFocusVisible?: boolean;
    isDisabled?: boolean;
}
export interface IButtonGroupProps {
    flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse';
    children: JSX.Element | Array<JSX.Element>;
    isDisabled?: boolean;
    isAttached?: boolean;
    reversed?: boolean;
    isReversed?: boolean;
}
export type IButtonComponentType<ButtonProps, GroupProps, SpinnerProps, TextProps, IconProps> = React.ForwardRefExoticComponent<PropsWithoutRef<ButtonProps & IButtonProps> & RefAttributes<ButtonProps>> & {
    Group: React.ForwardRefExoticComponent<RefAttributes<GroupProps> & PropsWithoutRef<GroupProps & IButtonGroupProps>>;
    Spinner: React.ForwardRefExoticComponent<PropsWithoutRef<SpinnerProps> & React.RefAttributes<SpinnerProps>>;
    Text: React.ForwardRefExoticComponent<React.RefAttributes<TextProps> & PropsWithoutRef<TextProps>>;
    Icon: React.ForwardRefExoticComponent<React.RefAttributes<IconProps> & PropsWithoutRef<IconProps>>;
};
export type IButtonProps = InterfaceButtonProps;
//# sourceMappingURL=types.d.ts.map