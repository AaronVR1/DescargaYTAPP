export interface InterfaceFormControlProps {
    id?: string;
    isInvalid?: boolean;
    isRequired?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
}
export interface IFormControlLabelProps {
    htmlFor?: string;
}
export type IFormControlComponentType<Root, Error, ErrorText, ErrorIcon, Label, LabelText, _LabelAstrick, Helper, HelperText> = React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<Root> & InterfaceFormControlProps> & {
    Error: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<Error>> & {
        Text: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<ErrorText>>;
        Icon: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<ErrorIcon>>;
    };
    Label: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<Label>> & {
        Text: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<LabelText>>;
    };
    Helper: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<Helper>> & {
        Text: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<HelperText>>;
    };
};
export type IFormControlProps = InterfaceFormControlProps;
type InnerForwardRefExoticComponent<T> = React.PropsWithoutRef<T> & React.RefAttributes<T>;
export {};
//# sourceMappingURL=types.d.ts.map