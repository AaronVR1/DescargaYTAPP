export interface InputContext {
    isDisabled?: boolean;
    isInvalid?: boolean;
    isReadOnly?: boolean;
    isRequired?: boolean;
    isHovered?: boolean;
    isFocused?: boolean;
    handleFocus?: any;
    isFocusVisible?: boolean;
    isFullWidth?: boolean;
    inputRef?: any;
    setIsFocused?: any;
    inputFieldRef?: any;
}
export interface IInputFieldProps {
    isInvalid?: boolean;
    isDisabled?: boolean;
    isHovered?: boolean;
    isFocused?: boolean;
    isRequired?: boolean;
    isReadOnly?: boolean;
    isFullWidth?: boolean;
}
export interface IInputProps {
    type?: 'text' | 'password';
    onKeyPress?: (e: any) => void;
    onFocus?: any;
    onBlur?: any;
}
export interface IInputSlotProps {
    focusOnPress?: boolean;
}
export type IInputComponentType<Root, Icon, Slot, Input> = React.ForwardRefExoticComponent<React.RefAttributes<Root> & React.PropsWithoutRef<Root> & IInputFieldProps> & {
    Icon: React.ForwardRefExoticComponent<React.RefAttributes<Icon> & React.PropsWithoutRef<Icon>>;
    Slot: React.ForwardRefExoticComponent<React.RefAttributes<Slot> & React.PropsWithoutRef<Slot> & IInputSlotProps>;
    Input: React.ForwardRefExoticComponent<React.RefAttributes<Input> & React.PropsWithoutRef<Input> & IInputProps>;
};
//# sourceMappingURL=types.d.ts.map