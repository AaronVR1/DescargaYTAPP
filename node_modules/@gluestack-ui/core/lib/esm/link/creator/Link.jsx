var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo } from 'react';
import { useLink } from './UseLink';
import { mergeRefs } from '@gluestack-ui/utils/common';
import { composeEventHandlers } from '@gluestack-ui/utils/common';
import { useFocusRing, useFocus } from '@gluestack-ui/utils/aria';
import { useHover, usePress } from '@gluestack-ui/utils/aria';
import { LinkContext } from './Context';
export const Link = (StyledLink) => forwardRef((_a, ref) => {
    var { children, isDisabled, isHovered: isHoveredProp, isPressed: isPressedProp, isFocused: isFocusedProp, isFocusVisible: isFocusVisibleProp, isExternal, href, onPress } = _a, props = __rest(_a, ["children", "isDisabled", "isHovered", "isPressed", "isFocused", "isFocusVisible", "isExternal", "href", "onPress"]);
    const { isFocusVisible, focusProps: focusRingProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ isDisabled });
    const { isFocused, focusProps } = useFocus();
    const { isHovered, hoverProps } = useHover();
    const _ref = React.useRef(null);
    const { linkProps } = useLink({
        isExternal,
        href,
        onPress,
        _ref,
        isDisabled,
    });
    const contextValue = useMemo(() => {
        return {
            isHovered: isHoveredProp || isHovered,
            isFocused: isFocusedProp || isFocused,
            isPressed: isPressedProp || isPressed,
            isDisabled: isDisabled,
            isFocusVisible: isFocusVisibleProp || isFocusVisible,
        };
    }, [
        isHoveredProp,
        isHovered,
        isFocusedProp,
        isFocused,
        isPressedProp,
        isPressed,
        isDisabled,
        isFocusVisibleProp,
        isFocusVisible,
    ]);
    return (<LinkContext.Provider value={contextValue}>
          <StyledLink ref={mergeRefs([_ref, ref])} states={{
            hover: isHoveredProp || isHovered,
            focus: isFocusedProp || isFocused,
            active: isPressedProp || isPressed,
            disabled: isDisabled,
            focusVisible: isFocusVisibleProp || isFocusVisible,
        }} dataSet={{
            hover: isHoveredProp || isHovered ? 'true' : 'false',
            focus: isFocusedProp || isFocused ? 'true' : 'false',
            active: isPressedProp || isPressed ? 'true' : 'false',
            disabled: isDisabled ? 'true' : 'false',
            focusVisible: isFocusVisibleProp || isFocusVisible ? 'true' : 'false',
        }} disabled={isDisabled} {...linkProps} {...props} onPressIn={composeEventHandlers(props === null || props === void 0 ? void 0 : props.onPressIn, pressProps.onPressIn)} onPressOut={composeEventHandlers(props === null || props === void 0 ? void 0 : props.onPressOut, pressProps.onPressOut)} onHoverIn={composeEventHandlers(props === null || props === void 0 ? void 0 : props.onHoverIn, hoverProps.onHoverIn)} onHoverOut={composeEventHandlers(props === null || props === void 0 ? void 0 : props.onHoverOut, hoverProps.onHoverOut)} onFocus={composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onFocus, focusProps.onFocus), focusRingProps.onFocus)} onBlur={composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onBlur, focusProps.onBlur), focusRingProps.onBlur)}>
            {children}
          </StyledLink>
        </LinkContext.Provider>);
});
//# sourceMappingURL=Link.jsx.map