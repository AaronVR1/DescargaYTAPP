var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { View } from 'react-native';
import { usePopover, DismissButton, Overlay } from '@react-aria/overlays';
import { MenuContext } from '../MenuContext';
export function Popover(_a) {
    var { StyledBackdrop } = _a, props = __rest(_a, ["StyledBackdrop"]);
    const ref = React.useRef(null);
    const { state, children } = props;
    const { onClose } = React.useContext(MenuContext);
    const { popoverProps, underlayProps } = usePopover(Object.assign(Object.assign({}, props), { popoverRef: ref, isNonModal: true }), state);
    if (!state.isOpen) {
        return null;
    }
    return (<Overlay>
      <StyledBackdrop {...underlayProps} onPress={onClose} tabIndex={-1} accessibilityElementsHidden aria-hidden={true}/>
      
      <View {...popoverProps} ref={ref}>
        <DismissButton onDismiss={state.close}/>
        {children}
        <DismissButton onDismiss={state.close}/>
      </View>
    </Overlay>);
}
//# sourceMappingURL=Popover.web.jsx.map