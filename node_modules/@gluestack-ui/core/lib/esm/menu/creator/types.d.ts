import type { ItemProps, Selection } from 'react-stately';
export interface InterfaceMenuProps {
    trigger: (_props: any, state: {
        open: boolean;
    }) => JSX.Element;
    onOpen?: () => void;
    onClose?: () => void;
    defaultIsOpen?: boolean;
    isOpen?: boolean;
    crossOffset?: number;
    offset?: number;
    placement?: 'top' | 'bottom' | 'left' | 'right' | 'top left' | 'top right' | 'bottom left' | 'bottom right' | 'right top' | 'right bottom' | 'left top' | 'left bottom';
    children?: any;
    shouldFlip?: boolean;
    selectionMode?: 'single' | 'multiple' | 'none';
    onSelectionChange?: (keys: Selection) => void;
    closeOnSelect?: boolean;
    selectedKeys?: Selection;
    disabledKeys?: string[];
    useRNModal?: boolean;
}
export interface IItemProp {
    closeOnSelect?: boolean;
    textValue?: string;
}
export type IMenuProps = InterfaceMenuProps;
export type IMenuComponentType<Root, Item, Label, Separator> = React.ForwardRefExoticComponent<React.RefAttributes<Root> & React.PropsWithoutRef<Root> & IMenuProps> & {
    Item: React.ForwardRefExoticComponent<React.RefAttributes<Item> & React.PropsWithoutRef<Item> & ItemProps<Item> & IItemProp>;
    ItemLabel: React.ForwardRefExoticComponent<React.RefAttributes<Label> & React.PropsWithoutRef<Label>>;
    Separator: React.ForwardRefExoticComponent<React.RefAttributes<Separator> & React.PropsWithoutRef<Separator>>;
};
//# sourceMappingURL=types.d.ts.map