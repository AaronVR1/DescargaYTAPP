export interface InterfaceModalProps {
    isOpen?: boolean;
    onClose?: any;
    defaultIsOpen?: boolean;
    initialFocusRef?: React.RefObject<any>;
    finalFocusRef?: React.RefObject<any>;
    avoidKeyboard?: boolean;
    closeOnOverlayClick?: boolean;
    isKeyboardDismissable?: boolean;
    useRNModal?: boolean;
}
export interface IModalContentProps {
    focusable?: boolean;
    focusScope?: boolean;
}
export type IModalComponentType<ModalProps, ContentProps, CloseButtonProps, HeaderProps, FooterProps, BodyProps, BackdropProps> = React.ForwardRefExoticComponent<React.PropsWithoutRef<ModalProps> & InterfaceModalProps & React.RefAttributes<ModalProps>> & {
    Content: React.ForwardRefExoticComponent<React.PropsWithoutRef<ContentProps> & IModalContentProps & React.RefAttributes<ContentProps>>;
    CloseButton: React.ForwardRefExoticComponent<React.PropsWithoutRef<CloseButtonProps> & React.RefAttributes<CloseButtonProps>>;
    Header: React.ForwardRefExoticComponent<React.PropsWithoutRef<HeaderProps> & React.RefAttributes<HeaderProps>>;
    Footer: React.ForwardRefExoticComponent<React.PropsWithoutRef<FooterProps> & React.RefAttributes<FooterProps>>;
    Body: React.ForwardRefExoticComponent<React.PropsWithoutRef<BodyProps> & React.RefAttributes<BodyProps>>;
    Backdrop: React.ForwardRefExoticComponent<React.PropsWithoutRef<BackdropProps> & React.RefAttributes<BackdropProps>>;
};
//# sourceMappingURL=types.d.ts.map