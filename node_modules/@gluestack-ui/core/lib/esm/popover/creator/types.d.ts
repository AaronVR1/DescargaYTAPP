import React from 'react';
export interface InterfacePopoverProps {
    defaultIsOpen?: boolean;
    isOpen?: boolean;
    trapFocus?: boolean;
    shouldFlip?: boolean;
    initialFocusRef?: React.RefObject<any>;
    finalFocusRef?: React.RefObject<any>;
    trigger: (_props: any, state: {
        open: boolean;
    }) => JSX.Element;
    crossOffset?: number;
    offset?: number;
    shouldOverlapWithTrigger?: boolean;
    children: React.ReactNode;
    isKeyboardDismissable?: boolean;
    placement?: 'top' | 'top left' | 'top right' | 'bottom' | 'bottom left' | 'bottom right' | 'right' | 'right top' | 'right bottom' | 'left' | 'left top' | 'left bottom';
    onClose?: () => void;
    onOpen?: () => void;
    useRNModal?: boolean;
    focusScope?: boolean;
}
export type IPopoverComponentType<PopoverProps, ArrowProps, ContentProps, HeaderProps, FooterProps, BodyProps, BackdropProps, CloseButtonProps> = React.ForwardRefExoticComponent<IPopoverProps & React.PropsWithoutRef<PopoverProps> & React.RefAttributes<PopoverProps>> & {
    Body: React.ForwardRefExoticComponent<React.PropsWithoutRef<BodyProps> & React.RefAttributes<BodyProps>>;
    CloseButton: React.ForwardRefExoticComponent<React.PropsWithoutRef<CloseButtonProps> & React.RefAttributes<CloseButtonProps>>;
    Content: React.ForwardRefExoticComponent<React.PropsWithoutRef<ContentProps> & React.RefAttributes<ContentProps>>;
    Footer: React.ForwardRefExoticComponent<React.PropsWithoutRef<FooterProps> & React.RefAttributes<FooterProps>>;
    Header: React.ForwardRefExoticComponent<React.PropsWithoutRef<HeaderProps> & React.RefAttributes<HeaderProps>>;
    Arrow: React.ForwardRefExoticComponent<React.PropsWithoutRef<ArrowProps> & React.RefAttributes<ArrowProps>>;
    Backdrop: React.ForwardRefExoticComponent<React.PropsWithoutRef<BackdropProps> & React.RefAttributes<BackdropProps>>;
};
export type IPopoverProps = InterfacePopoverProps;
//# sourceMappingURL=types.d.ts.map