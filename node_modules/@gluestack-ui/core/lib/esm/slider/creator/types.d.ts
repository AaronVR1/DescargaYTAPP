export interface InterfaceSliderProps {
    value?: number;
    defaultValue?: number;
    onChange?: (value: number) => void;
    children?: any;
    isReversed?: boolean;
    orientation?: 'horizontal' | 'vertical';
    isDisabled?: boolean;
    onChangeEnd?: (value: number) => void;
    minValue?: number;
    maxValue?: number;
    step?: number;
    isReadOnly?: boolean;
    sliderTrackHeight?: (string & {}) | number;
    thumbSize?: (string & {}) | number;
    isHovered?: boolean;
    isFocused?: boolean;
    isFocusVisible?: boolean;
    isPressed?: boolean;
}
export interface ISliderTrackProps {
    isReadOnly?: boolean;
    children?: any;
}
export interface ISliderTrackFilledProps {
    isReadOnly?: boolean;
}
export interface ISliderThumbProps {
    orientation?: 'horizontal' | 'vertical';
    isDisabled?: boolean;
    isReadOnly?: boolean;
    onFocus?: (e: any) => void;
    onBlur?: (e: any) => void;
    scaleOnPressed?: any;
}
export type ISliderComponentType<StyledSlider, StyledSliderThumb, StyledSliderTrack, StyledSliderFilledTrack> = React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledSlider> & ISliderProps> & {
    Thumb: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledSliderThumb> & ISliderThumbProps>;
    Track: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledSliderTrack> & ISliderTrackProps>;
    FilledTrack: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledSliderFilledTrack> & ISliderTrackFilledProps>;
};
export type ISliderProps = InterfaceSliderProps;
type InnerForwardRefExoticComponent<T> = React.PropsWithoutRef<T> & React.RefAttributes<T>;
export {};
//# sourceMappingURL=types.d.ts.map