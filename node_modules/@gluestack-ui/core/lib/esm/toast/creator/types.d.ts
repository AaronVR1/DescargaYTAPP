import type { Dispatch, MutableRefObject, ReactNode, SetStateAction } from 'react';
export type ToastPlacement = 'top' | 'top right' | 'top left' | 'bottom' | 'bottom left' | 'bottom right';
export interface InterfaceToastProps {
    duration?: number | null;
    id?: string;
    onCloseComplete?: () => void;
    placement?: ToastPlacement;
    render?: (props: ToastComponentProps) => ReactNode;
    avoidKeyboard?: boolean;
    containerStyle?: React.CSSProperties;
}
export interface ToastComponentProps {
    id: string;
}
export interface VisibleToasts {
    [key: string]: boolean;
}
export interface IToast {
    id: string;
    component: ReactNode;
    config?: IToastProps;
}
export type IToastInfo = {
    [key in ToastPlacement]: Array<IToast>;
};
export type IToastContext = {
    toastInfo: IToastInfo;
    setToastInfo: Dispatch<SetStateAction<IToastInfo>>;
    setToast: (props: IToastProps) => string;
    removeToast: (id: string) => void;
    hideAll: () => void;
    isActive: (id: string) => boolean;
    visibleToasts: VisibleToasts;
    setVisibleToasts: Dispatch<SetStateAction<VisibleToasts>>;
    hideToast: (id: string) => void;
    avoidKeyboard?: boolean;
    bottomInset?: number;
    AnimationWrapper: MutableRefObject<any | null>;
    AnimatePresence: MutableRefObject<any | null>;
};
export type IToastComponentType<StyledToast, StyledToastTitle, StyledToastDescription> = React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledToast>> & {
    Title: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledToastTitle>>;
    Description: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledToastDescription>>;
};
type InnerForwardRefExoticComponent<T> = React.PropsWithoutRef<T> & React.RefAttributes<T>;
export type IToastProps = InterfaceToastProps;
export {};
//# sourceMappingURL=types.d.ts.map