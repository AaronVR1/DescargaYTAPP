export interface InterfaceTooltipProps {
    isOpen?: boolean;
    isDisabled?: boolean;
    defaultIsOpen?: boolean;
    onClose?: () => void;
    onOpen?: () => void;
    openDelay?: number;
    closeDelay?: number;
    placement?: 'top' | 'bottom' | 'left' | 'right' | 'top left' | 'top right' | 'bottom left' | 'bottom right' | 'right top' | 'right bottom' | 'left top' | 'left bottom';
    children: any;
    closeOnClick?: boolean;
    trigger: ({ ref, onHoverIn, onHoverOut }: any, { open }: any) => React.ReactNode;
    arrowSize?: number;
    hasArrow?: boolean;
    offset?: number;
    crossOffset?: number;
    shouldOverlapWithTrigger?: boolean;
    shouldFlip?: boolean;
}
export type IToolTipComponentType<StyledTooltip, StyledTooltipContent, StyledTooltipText> = React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledTooltip> & ITooltipProps> & {
    Content: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledTooltipContent>>;
    Text: React.ForwardRefExoticComponent<InnerForwardRefExoticComponent<StyledTooltipText>>;
};
type InnerForwardRefExoticComponent<T> = React.PropsWithoutRef<T> & React.RefAttributes<T>;
export type ITooltipProps = InterfaceTooltipProps;
export {};
//# sourceMappingURL=types.d.ts.map